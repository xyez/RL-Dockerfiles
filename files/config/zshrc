# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git zsh-syntax-highlighting zsh-autosuggestions zsh-completions)
autoload -U compinit && compinit

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
set -o vi
export PATH=$HOME/.local/bin:$PATH
#export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libGLEW.so
export TERM=xterm-256color
function rrc {
  tempfile="$(mktemp -t tmp.XXXXXX)"
  ranger --choosedir="$tempfile" "${@:-$(pwd)}"
  test -f "$tempfile" &&
    if [ "$(cat -- "$tempfile")" != "$(echo -n $(pwd))" ]; then
      cd -- "$(cat "$tempfile")"
    fi
  rm -f -- "$tempfile"
}
bindkey '^@' set-mark-command
bindkey '^A' beginning-of-line
# bindkey '^B' forbidden
# bindkey '^C' forbidden
bindkey '^D' kill-whole-line
bindkey '^E' end-of-line
bindkey '^F' forward-word
bindkey '^G' backward-word
bindkey '^H' vi-backward-blank-word
# bindkey '^I' forbidden
bindkey '^J' down-line-or-beginning-search
bindkey '^K' up-line-or-beginning-search
bindkey '^L' clear-screen
bindkey '^M' accept-line
bindkey '^N' down-line-or-history
# bindkey '^O' None
bindkey '^P' up-line-or-history
bindkey '^Q' kill-word
bindkey '^R' history-incremental-search-backward
bindkey '^S' history-incremental-search-forward
bindkey '^T' forward-word
bindkey '^U' undo
bindkey '^V' vi-cmd-mode
bindkey '^W' backward-kill-word
bindkey '^X' edit-command-line
# bindkey '^Y' None
# bindkey '^Z' forbidden
bindkey '^[[1~' beginning-of-line
bindkey '^[[3~' delete-char-or-list
bindkey '^[[4~' end-of-line

# inverse search
setopt noincappendhistory
setopt nosharehistory
# tmuxp
export DISABLE_AUTO_TITLE='true'
# mujoco
export MUJOCO_GL=osmesa
export MJLIB_PATH=$HOME/.mujoco/mujoco210/bin/libmujoco210.so
#export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/.mujoco/mjpro150/bin
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/.mujoco/mujoco210/bin
export DISABLE_AUTO_TITLE='true'

# >>> conda initialize >>>
CONDAPATH=/home/docker/.local/softwares/anaconda3
# !! Contents within this block are managed by 'conda init' !!
__conda_setup=$( ("$CONDAPATH/bin/conda" "shell.bash" "hook" 2>/dev/null))
if [ $? -eq 0 ]; then
  eval "$__conda_setup"
else
  if [ -f "$CONDAPATH/etc/profile.d/conda.sh" ]; then
    . "$CONDAPATH/etc/profile.d/conda.sh"
  else
    export PATH="$CONDAPATH/bin:$PATH"
  fi
fi
unset __conda_setup
# conda deactivate
# <<< conda initialize <<<

# >>> remote copy >>>
function rcopy() {
  if [[ $1 =~ : ]]; then
    if [[ ${1: -1} = / ]]; then
      1=${1%?}
    fi
    echo $1
    tmpfile="$(mktemp -d)"
    rsync -ae ssh "$1/{.rsync.exclude,.rsync.include}" $tmpfile
    rsync_exclude=$tmpfile/.rsync.exclude
    rsync_include=$tmpfile/.rsync.include
  else
    rsync_exclude=$1/.rsync.exclude
    rsync_include=$1/.rsync.include
  fi
  rsync_args="-ave ssh --prune-empty-dirs"
  if [ -f $rsync_exclude ]; then
    rsync_args="$rsync_args --exclude-from=$rsync_exclude"
  fi
  if [ -f $rsync_include ]; then
    rsync_args="$rsync_args --include-from=$rsync_include --exclude='*'"
  fi
  echo $rsync_args | xargs rsync $1 $2
  if [ -d $tmpfile ]; then
    rm -rf $tmpfile
  fi
}
# <<< remote copy <<<
